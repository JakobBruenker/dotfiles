:set -Wall
:set -XNoImplicitPrelude
:set -XOverloadedStrings
:set -XTupleSections
:set -fno-warn-type-defaults

import Prelude
import qualified IPPrint
import qualified Language.Haskell.HsColour as HsColour
import qualified Language.Haskell.HsColour.Colourise as HsColour
import qualified Language.Haskell.HsColour.Output as HsColour

let myColourPrefs = HsColour.defaultColourPrefs { HsColour.conid = [HsColour.Foreground HsColour.Yellow, HsColour.Italic], HsColour.conop = [HsColour.Foreground HsColour.Yellow], HsColour.string = [HsColour.Foreground HsColour.Red, HsColour.Italic], HsColour.char = [HsColour.Foreground HsColour.Cyan], HsColour.number = [HsColour.Foreground HsColour.Cyan, HsColour.Italic], HsColour.layout = [HsColour.Foreground HsColour.Red], HsColour.keyglyph = [HsColour.Foreground HsColour.Red], HsColour.varid = [HsColour.Foreground HsColour.Blue] }

let myPrint = putStrLn . HsColour.hscolour (HsColour.TTYg HsColour.XTerm256Compatible) myColourPrefs False False "" False . IPPrint.pshow

:set -interactive-print=myPrint

:module
import ClassyPrelude
import Data.Scientific
default(Integer, Scientific, Text)

:set prompt "\ESC[0;30m%s\n\ESC[1;91mÎ» \ESC[m"
:set prompt2 "\ESC[1;95m| \ESC[m"
:set +t
:set +m
